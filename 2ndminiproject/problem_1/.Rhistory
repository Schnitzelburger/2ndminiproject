cran <- tbl_df(mydf)
rm("mydf")
cran
?select
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran, -time)
-5:20
-(5:20)
select(cran, -(x:size))
select(cran, -(X:size))
filter(cran, package == "swirl")
filter(cran, r_version == "3.1.1", country == "US")
?Comparison
View(cran)
filter(cran, r_version <= "3.0.2", country == "ID")
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, country == "US" | country == "IN")
filter(cran, size > 100500, r_os == "linux-gnu")
is.na(c(3,5,NA,10))
!is.na(c(3,5,NA,10))
filter(cran, !is.na(cran))
filter(cran, !is.na(r_.version))
filter(cran, !is.na(r_version))
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10)
mutate(cran, correct_size = size + 1000)
mutate(cran3, correct_size = size + 1000)
summarize(cran, avg_bytes = mean(size))
library(dplyr)
cran <- tbl_df(mydf)
rm("mydf")
cran
?group_by
by_package <- group_by(cran)
by_package <- group_by(cran, package)
by_package
summarize(by_package)
?summarize
summarize(by_package, mean(size))
submit()
pack_sum
quantile(pack_sum$count, probs = 0.99)
?filter
filter(pack_sum, count > 679)
top_counts <- filter(pack_sum, count > 679)
top_counts
View(top_counts)
top_counts_sorted <- arrange(top_counts, desc(count))
View(top_counts_sorted)
quantile(pack_sum$unique, probs = 0.99)
top_unique <- filter(pack_sum, unique > 465)
View(top_unique)
top_unique_sorted <- arrange(top_unique, desc(unique))
View(top_unique_sorted)
submit()
submit()
submit()
View(result3)
sumbit()
cran %>%
select(ip_id, country, package, size) %>%
print()
source("C:/Users/jaspe/AppData/Local/Temp/RtmpKEe3rl/chain1.R")
swirl()
cran %>%
select(ip_id, country, package, size) %>%
print()
cran %>%
select(ip_id, country, package, size) %>%
print
help()
cran %>%
select() %>%
print
ip_id, country, package, size
cran %>%
select(ip_id, country, package, size) %>%
print
next()
next
swirl
swirl()
cran %>%
select(ip_id, country, package, size) %>%
print
source("C:/Users/jaspe/AppData/Local/Temp/RtmpKEe3rl/chain1.R")
info()
skip()
cran %>%
select(ip_id, country, package, size) %>%
mutate(size_mb = size / 2^20)
chain2
chain2.R
r chain2
source("C:/Users/jaspe/AppData/Local/Temp/RtmpKEe3rl/chain2.R")
source("chain2.R")
skip()
source("C:/Users/jaspe/AppData/Local/Temp/RtmpKEe3rl/chain3.R")
skip()
source("C:/Users/jaspe/AppData/Local/Temp/RtmpKEe3rl/chain4.R")
cran
cran %>%
select(ip_id, country, package, size) %>%
mutate(size_mb = size / 2^20) %>%
filter(size_mb <= 0.5) %>%
arrange(desc(size_mb)) %>%
print
skip()
info()
main()
library(tidyr)
students
?gather
gather(students, sex, count, -grade)
students2
View(students)
res <- gather(students2, sex_class, value, -grade)
res <- gather(students2, sex_class, count, -grade)
res
?separate
separate(res, sex_class, c("sex", "class"))
submit()
students3
?gather
submit()
?spread
submit()
submit()
source("C:/Users/jaspe/AppData/Local/Temp/RtmpKEe3rl/script3.R")
submit()
submit()
library(readr)
parse_number("class5")
?mutate
submit()
students4
submit()
submit()
submit()
passed
failed
mutate(passed, status = "passed")
passed <- mutate(passed, status = "passed")
passed <- mutate(failed, status = "failed")
failed <- mutate(failed, status = "failed")
?bind_rows
bind_rows(passed, failed)
sat
?select
submit()
?group_by
submit()
Sys.getlocale("LC_TIME")
library(lubridate)
help(package = lubridate)
today()
this_day <- today()
this_day
year(this_day)
wday(this_day)
wday(this_day, label = T)
wday(this_day, label = TRUE)
this_moment <- now()
this_moment
hour(this_moment)
my_date <- ymd("1989-05-17")
my_date
class(my_date)
ymd("1989 May 17")
mdy("March 12, 1975")
dmy(15081985)
dmy(25081985)
ymd("192012")
ymd("1920/1/2")
dt1
dt1_parsed <- ymd_hms(dt1)
dt1_parsed
class(dt1_parsed)
hms("03:22:14")
dt2
ymd(dt2)
update(this_moment, hours = 8, minutes = 34, seconds = 55)
this_moment
this_moment <- update(this_moment, hour = 5, minute = 10)
this_moment <- update(this_moment, hours = 5, minutes = 10)
this_moment
?now
nyc = now("America/New_york")
nyc = now("America/New_York")
nyc = now(tzone = "America/New_York")
nyc <- now("America/New_York")
nyc
depart <- nyc + days(2)
depart
depart <- depart %>% update(hours = 17, minutes = 34)
depart %>% update(hours = 17, minutes = 34)
depart <- update(depart, hours = 17, minutes = 34)
depart
arrive <- depart + hours(15) + minutes(50)
?with_tz
arrive <- with_tz("Asia/Hong_Kong")
arrive <- with_tz(arrive, "Asia/Hong_Kong")
arrive
last_time <- mdy("June 17, 2008", tz = "Singapore")
last_time
?interval
how_long <- interval(last_time, arrive)
as.period(how_long)
stopwatch()
swirl()
library("swirl")
swirl()
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
cran
?select
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
?summarize
bye()
nchar()
?nchar
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx"
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx"
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx"
download.file(fileUrl, destfile = paste0(getwd(), '/getdata%2Fdata%2FDATA.gov_NGAP.xlsx'), method = "curl")
dat <- xlsx::read.xlsx(file = "getdata%2Fdata%2FDATA.gov_NGAP.xlsx", sheetIndex = 1, rowIndex = 18:23, colIndex = 7:15)
sum(dat$Zip*dat$Ext,na.rm=T)
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx"
download.file(fileUrl, destfile = paste0(getwd(), '/getdata%2Fdata%2FDATA.gov_NGAP.xlsx'), method = "curl")
dat <- xlsx::read.xlsx(file = "getdata%2Fdata%2FDATA.gov_NGAP.xlsx", sheetIndex = 1, rowIndex = 18:23, colIndex = 7:15)
sum(dat$Zip*dat$CuCurrent,na.rm=T)
library(data.table)
housing <- data.table::fread("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv")
housing[VAL == 16, .N]
library(jpeg)
packages.install("jpeg")
install.packages("jpeg")
library(jpeg)
?jpeg
testimg <- jpeg("pbs.twimg.com/profile_images/1235025169015398402/fBI8fsUt_400x400.jpg")
download.file("pbs.twimg.com/profile_images/1235025169015398402/fBI8fsUt_400x400.jpg")
download.file("pbs.twimg.com/profile_images/1235025169015398402/fBI8fsUt_400x400.jpg", destfile = panda.jpg)
download.file("pbs.twimg.com/profile_images/1235025169015398402/fBI8fsUt_400x400.jpg", destfile = "panda.jpg")
download.file("pbs.twimg.com/profile_images/1235025169015398402/fBI8fsUt_400x400.jpg", destfile = paste0(getwd(), '/panda.jpg'), method = "curl")
testimg <- download.file("pbs.twimg.com/profile_images/1235025169015398402/fBI8fsUt_400x400.jpg", destfile = paste0(getwd(), '/panda.jpg'), method = "curl")
jpeg("panda.jpg", native = TRUE)
jpeg("panda.jpg")
getwd()
img <- readJPEG("img", "panda.jpg", package = "jpeg", native = TRUE)
img <- readJPEG("img", "panda.jpg", native = TRUE)
img <- readJPEG("panda.jpg", native = TRUE)
img <- readJPEG("pandabear.jpg", native = TRUE)
quantile(img)
?quantile
quantile(img, probs = c(0.4,0.6))
library("XML")
fileURL<-"https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
doc <- XML::xmlTreeParse(sub("s", "", fileURL), useInternal = TRUE)
rootNode <- XML::xmlRoot(doc)
zipcodes <- XML::xpathSApply(rootNode, "//zipcode", XML::xmlValue)
xmlZipcodeDT <- data.table::data.table(zipcode = zipcodes)
xmlZipcodeDT[zipcode == "21202", .N]
View(housing)
library(dplyr)
?filter
library(data.table)
housing <- data.table::fread("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv")
agricultureLogical <- filter(housing, (ACR == 1 | ACR == 2) & AGS == 5)
agricultureLogical
?which
library(data.table)
housing <- data.table::fread("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv")
agricultureLogical <- filter(housing, (ACR == 1 | ACR == 2) & AGS == 5)
which(agricultureLogical)
library(data.table)
housing <- data.table::fread("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv")
agricultureLogical <- filter(housing, (ACR == 1 | ACR == 2) & AGS == 5)
which(agricultureLogical == TRUE)
testurl <- url("https://www.upv.edu.ph/index.php/about")
htmlcode <- readLines(testurl)
close(testurl)
htmlcode
?nchar
htmlcode[[8]]
htmlcode[8]
htmlcode[[8]]
nchar(htmlcode[[8]])
nchar(htmlcode[[32]])
nchar(htmlcode[[56]])
nchar(htmlcode[[85]])
htmlcode[[85]]
htmlcode[[8]]
nchar(htmlcode[[85]])
htmlcode[[8]]
char(htmlcode[[8]])
htmlcode[[8]]
nchar(htmlcode[[8]])
htmlcode[[8]]
nchar(htmlcode[[32]])
htmlcode[[8]]
htmlcode[[32]]
nchar(htmlcode[[56]])
htmlcode[[56]]
quantile(img, probs = c(0.4,0.6))
sum(dat$Zip*dat$CuCurrent,na.rm=T)
housing[VAL == 16, .N]
xmlZipcodeDT[zipcode == "21202", .N]
agricultureLogical <- filter(housing, (ACR == 1 | ACR == 2) & AGS == 5)
which(agricultureLogical == TRUE)
agricultureLogical <- filter(housing, ACR == 2 & AGS == 5)
which(agricultureLogical == TRUE)
which(agricultureLogical)
library("swirl")
swirl()
install_from_swirl("Exploratory Data Analysis")
swirl()
head(pollution)
dim(pollution)
summary(pollution$pm25)
quantile(pollution$pm25)
quantile(ppm)
boxplot(ppm)
boxplot(ppm, col="blue")
abline(h=12)
hist(ppm, color="green")
hist(ppm, col = "green")
rug(ppm)
low
high
hist(ppm, col = "green", breaks = "100")
hist(ppm, col="green", breaks="100")
hist(ppm, col="green", breaks=100)
rug(ppm)
hist(ppm, col="green")
abline(v=12, lwd=2)
abline(v=median(ppm), col="magenta", lwd=4)
names(pollution)
reg <- table(pollution$region)
reg
barplot(reg, col="wheat", main="Number of Counties in Each Region")
boxplot(pm25~region, col="red")
boxplot(pm25~region, data=pollution, col="red")
par(mfrow=c(2,1),mar=c(4,4,2,1))
east <- subset(pollution, region == "east")
head(east)
hist(hist$pm25, col="green")
hist(east$pm25, col="green")
hist(subset(pollution, region == "west")$pm25, col="green")
with(pollution. plot)
with(pollution, plot)
with(pollution, plot(latitude, pm25))
?abline
abline(h=12, lwd=2, lty=2)
plot(pollution$latitude, ppm, col=pollution$region)
abline(h=12, lwd=2, lty=2)
par(mfrow = c(1, 2), mar
| = c(5, 4, 2, 1))
par(mfrow = c(1, 2), mar= c(5, 4, 2, 1))
west <- subset(pollution, region="west")
west <- subset(pollution, region=="west")
plot(west$latitude, west$pm25, main="west")
plot(west$latitude, west$pm25, main = "West")
plot(east$latitude, east$pm25, main = "east")
plot(east$latitude, east$pm25, main = "East")
?Devices
R(faithful, plot(eruptions, waiting))
windows(faithful, plot(eruptions, waiting))
plot(faithful, plot(eruptions, waiting))
help
with(faithful, plot(eruptions, waiting))
title(main="Old Faithful Geyser data")
dev.cur()
pdf(file="myplot.pdf")
with(faithful, plot(eruptions, waiting))
title(main="Old Faithful Geyser data")
dev.cur()
dev.off()
dev.cur()
with(faithful, plot(eruptions, waiting))
title(main="Old Faithful Geyser data")
dev.copy(png, file="geyserplot.png")
dev.off()
head(cars)
with(cars, plot(speed, dist))
text(mean(cars$speed), max(cars$dist), "SWIRL rules!")
head(state)
table(state$region)
xyplot(Life.Exp ~ Income, state, layout)
xyplot(Life.Exp ~ Income, state, c(4,1))
xyplot(Life.Exp ~ Income | region, state, c(4,1))
xyplot(Life.Exp ~ Income | region, data = state, layout = c(4,1))
xyplot(Life.Exp ~ Income | region, data = state, layout = c(2,2))
head(mpg)
dim(mpg)
table(mpg$nodel)
table(mpg$model)
qplot(displ, hwy, data=mpg)
head(airquality)
range(airquality$Ozone, na.rm=TRUE)
hist(airquality$Ozone)
table(airquality$Month)
boxplot(Ozone~Month, airquality)
boxplot(Ozone~Month, airquality, xlab = "Month", ylab = "Ozone (ppb)", col.axis = "blue", col.lab = "red")
title(main = "Ozone and Wind in New York City")
with(airquality, plot())
with(airquality, plot
)
with(airquality, plot(Wind,Ozone))
title(main = "Ozone and Wind in New York City")
length(par())
names(par())
par()$pin
par("fg")
par("pch")
par("lty")
plot(airquality$Wind, airquality$Ozone, type = "n")
title(main = "Wind and Ozone in NYC")
may <- subset(airquality$Month == "May")
may <- subset(airquality$Month == 5)
may <- subset(airquality, Month == 5)
?points
points(may$Wind, may$Ozone, pch = 17, col = "blue")
points(may$Wind, may$Ozone, col = "blue", pch = 17)
notmay <- subset(airquality, Month != 5)
points(notmay$Wind, notmay$Ozone, col = "red", pch = 8)
legend("topright", pch = c(17,8), col = c("blue", "red"), legend = c("May", "Other Months"))
?abline
abline(v = median(airquality$Wind, na.rm = TRUE), ;ty = 2, lwd = 2)
abline(v = median(airquality$Wind, na.rm = TRUE), lty = 2, lwd = 2)
abline(v = median(airquality$Wind), lty = 2, lwd = 2)
par(mfrow = c(1,2))
plot(airquality$Wind, airquality$Ozone, main = "Ozone and Wind")
plot(airquality$Ozone, airquality$Solar.R, main = "Ozone and Solar Radiation")
par(mfrow = c(1,3), mar = c(4,4,2,1), oma = c(0,0))
par(mfrow = c(1,3), mar = c(4,4,2,1), oma = c(0,0,2,0))
plot(airquality$Wind, airquality$Ozone, main = "Ozone and Wind")
plot(airquality$Ozone, airquality$Solar.R, main = "Ozone and Solar Radiation")
plot(airquality$Solar.R, airquality$Ozone, main = "Ozone and Solar Radiation")
plot(airquality$Temp, airquality$Ozone, main = "Ozone and Temperature")
mtext("Ozone and Weather in New York City", outer = TRUE)
library(data.table)
# Get variable and activity names
varNames <- read.table("specdata/UCI HAR Dataset/features.txt")
activityNames <- read.table("specdata/UCI HAR Dataset/activity_labels.txt")
# Read test and training datasets
test <- read.table("specdata/UCI HAR Dataset/test/X_test.txt")
training <- read.table("specdata/UCI HAR Dataset/train/X_train.txt")
# Get activity and subject IDs
testActivityIDs <- read.table("specdata/UCI HAR Dataset/test/Y_test.txt")
testSubjectIDs <- read.table("specdata/UCI HAR Dataset/test/subject_test.txt")
trainActivityIDs <- read.table("specdata/UCI HAR Dataset/train/Y_train.txt")
trainSubjectIDs <- read.table("specdata/UCI HAR Dataset/train/subject_train.txt")
# Merge activity and subject IDs
activityIDs <- rbind(testActivityIDs, trainActivityIDs)
subjectIDs <- rbind(testSubjectIDs, trainSubjectIDs)
# Merge training and test datasets
combinedTestTrain <- rbind(test, training)
# Add descriptive names to variables
colnames(combinedTestTrain) <- varNames[[2]]
# Extract only measurements of mean and std deviation for each measurement
meanStdCombined <- combinedTestTrain[ ,grepl("mean|std", colnames(combinedTestTrain))]
getwd()
setwd("./2ndminiproject/problem_1/")
library(data.table)
# Get variable and activity names
varNames <- read.table("specdata/UCI HAR Dataset/features.txt")
activityNames <- read.table("specdata/UCI HAR Dataset/activity_labels.txt")
# Read test and training datasets
test <- read.table("specdata/UCI HAR Dataset/test/X_test.txt")
training <- read.table("specdata/UCI HAR Dataset/train/X_train.txt")
# Get activity and subject IDs
testActivityIDs <- read.table("specdata/UCI HAR Dataset/test/Y_test.txt")
testSubjectIDs <- read.table("specdata/UCI HAR Dataset/test/subject_test.txt")
trainActivityIDs <- read.table("specdata/UCI HAR Dataset/train/Y_train.txt")
trainSubjectIDs <- read.table("specdata/UCI HAR Dataset/train/subject_train.txt")
# Merge activity and subject IDs
activityIDs <- rbind(testActivityIDs, trainActivityIDs)
subjectIDs <- rbind(testSubjectIDs, trainSubjectIDs)
# Merge training and test datasets
combinedTestTrain <- rbind(test, training)
# Add descriptive names to variables
colnames(combinedTestTrain) <- varNames[[2]]
# Extract only measurements of mean and std deviation for each measurement
meanStdCombined <- combinedTestTrain[ ,grepl("mean|std", colnames(combinedTestTrain))]
nrow(activityIDs)
source("C:/Users/jaspe/Desktop/Code/2ndminiproject/problem_1/run_analysis.R")
source("C:/Users/jaspe/Desktop/Code/2ndminiproject/problem_1/run_analysis.R")
source("C:/Users/jaspe/Desktop/Code/2ndminiproject/problem_1/run_analysis.R")
varNames[[2]][1]
source("C:/Users/jaspe/Desktop/Code/2ndminiproject/problem_1/run_analysis.R")
source("C:/Users/jaspe/Desktop/Code/2ndminiproject/problem_1/run_analysis.R")
source("C:/Users/jaspe/Desktop/Code/2ndminiproject/problem_1/run_analysis.R")
source("C:/Users/jaspe/Desktop/Code/2ndminiproject/problem_1/run_analysis.R")
